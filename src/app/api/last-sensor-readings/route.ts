// src/app/api/last-sensor-readings/route.ts

import { NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";

// ‚úÖ –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY!;

// ‚ùó –ì–∞—Ä–∞–Ω—Ç–∏—è, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (–≤ dev –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ)
if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
  console.error("‚ùå Supabase credentials are missing in .env or project settings");
  throw new Error("‚ùå Supabase credentials missing.");
}

// ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Supabase
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

// ‚úÖ –¢–∏–ø–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
interface SensorReading {
  sensor_id: string;
  temperature: number | string;
  timestamp: string;
}

export async function GET() {
  try {
    const now = Date.now();

    const { data, error } = await supabase
      .from("SensorReading")
      .select("sensor_id, temperature, timestamp")
      .order("timestamp", { ascending: false });

    if (error) {
      console.error("‚ùå Supabase error:", error.message);
      return NextResponse.json({ error: "Failed to fetch sensor data" }, { status: 500 });
    }

    if (!data || data.length === 0) {
      console.warn("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ SensorReading");
      return NextResponse.json({ sensors: {}, serverTime: now });
    }

    // ‚úÖ –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ sensor_id ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–∫–∞–∑
    const latest: Record<string, {
      id: string;
      temperature: number;
      timestamp: number;
    }> = {};

    for (const row of data as SensorReading[]) {
      const id = row.sensor_id;
      if (!latest[id]) {
        latest[id] = {
          id,
          temperature: parseFloat(String(row.temperature)),
          timestamp: new Date(row.timestamp).getTime(),
        };
      }
    }

    return NextResponse.json({ sensors: latest, serverTime: now });
  } catch (err: any) {
    console.error("üî• API /api/last-sensor-readings error:", err?.message || err);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}
