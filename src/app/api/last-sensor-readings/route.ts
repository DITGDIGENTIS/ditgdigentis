// src/app/api/last-sensor-readings/route.ts

import { NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";

// ‚úÖ –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
  console.error("‚ùå Supabase credentials are missing in .env or project settings");
  throw new Error("‚ùå Supabase credentials missing.");
}

// ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Supabase
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

// ‚úÖ –¢–∏–ø–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
interface SensorReading {
  sensor_id: string;
  temperature: number | string;
  timestamp: string | null;
}

export async function GET() {
  try {
    const now = Date.now();

    // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const { data, error } = await supabase
      .from("SensorReading")
      .select("sensor_id, temperature, timestamp")
      .order("timestamp", { ascending: false });

    if (error) {
      console.error("‚ùå Supabase fetch error:", error.message, error.details || "");
      return NextResponse.json({ error: "Failed to fetch sensor data" }, { status: 500 });
    }

    if (!data || data.length === 0) {
      console.warn("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ SensorReading");
      return NextResponse.json({ sensors: {}, serverTime: now });
    }

    const latest: Record<
      string,
      {
        id: string;
        temperature: number;
        timestamp: number;
      }
    > = {};

    for (const row of data as SensorReading[]) {
      const { sensor_id, temperature, timestamp } = row;

      if (!sensor_id || !timestamp) {
        console.warn(`‚õî –ü—Ä–æ–ø—É—â–µ–Ω: ${sensor_id} –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è timestamp`);
        continue;
      }

      const ts = new Date(timestamp).getTime();
      if (isNaN(ts)) {
        console.warn(`‚õî –ü—Ä–æ–ø—É—â–µ–Ω: ${sensor_id} –∏–∑-–∑–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ timestamp = ${timestamp}`);
        continue;
      }

      if (!latest[sensor_id]) {
        latest[sensor_id] = {
          id: sensor_id,
          temperature: parseFloat(String(temperature)),
          timestamp: ts,
        };
      }
    }

    console.log("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ:", latest);

    return NextResponse.json({
      sensors: latest,
      serverTime: now,
    });
  } catch (err: any) {
    console.error("üî• API /api/last-sensor-readings error:", err?.message || err);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}
